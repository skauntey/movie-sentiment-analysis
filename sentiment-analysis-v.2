{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "name": "IMDB_analysis.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "accelerator": "GPU"
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/skauntey/movie-sentiment-analysis/blob/ALMS/sentiment-analysis-v.2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_LvNjbXGwGEn",
        "outputId": "53d9e72f-89d4-4543-fc6d-f4ad23ab47fe"
      },
      "source": [
        "!mkdir ~/.kaggle\n",
        "!echo '{\"username\":\"kaunteyshah\",\"key\":\"e2678a9d0e44e057000b9daf059111b5\"}' > ~/.kaggle/kaggle.json\n",
        "!chmod 600 ~/.kaggle/kaggle.json"
      ],
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "mkdir: cannot create directory ‘/root/.kaggle’: File exists\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Ix-DSBh2oDB0"
      },
      "source": [
        "import tensorflow as tf\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import os, shutil\n",
        "import kaggle"
      ],
      "execution_count": 5,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "pycharm": {
          "is_executing": true,
          "name": "#%% md\n"
        },
        "id": "0Vz1BA0xoDCW"
      },
      "source": [
        "#### 1. Downloading Kaggle files"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 240
        },
        "id": "9jQb0Z80yjeT",
        "outputId": "88dcaaf6-a468-412b-9009-250b149d4436"
      },
      "source": [
        "file = 'dataset/'\n",
        "for files in os.listdir(file):\n",
        "    path = os.path.join(os.getcwd()+'/'+'dataset/',files)\n",
        "    try:\n",
        "      shutil.rmtree(path)\n",
        "    except:\n",
        "      raise"
      ],
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-8-db35cbf40a74>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0mfile\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'dataset/'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0;32mfor\u001b[0m \u001b[0mfiles\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlistdir\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetcwd\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'/'\u001b[0m\u001b[0;34m+\u001b[0m\u001b[0;34m'dataset/'\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mfiles\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m       \u001b[0mshutil\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mrmtree\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'dataset/'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "N6fajUBQoDCX"
      },
      "source": [
        "kaggle.api.authenticate()\n",
        "kaggle.api.competition_download_files('sentiment-analysis-on-movie-reviews', path= str(os.getcwd())+\"/dataset/\", force = True)"
      ],
      "execution_count": 9,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "YsVVPfE6oDCa"
      },
      "source": [
        "#### 2. Unzipping Kaggle files"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "id": "r7L-RkzGoDCd"
      },
      "source": [
        "import zipfile\n",
        "ziped_file = r'dataset/sentiment-analysis-on-movie-reviews.zip'\n",
        "with zipfile.ZipFile(ziped_file) as zip_file:\n",
        "    for member in zip_file.namelist():\n",
        "        if member.split('.')[-1] == \"zip\":\n",
        "            fdir = member.split('.')[0]\n",
        "            zip_file.extract(member, path= os.path.join('dataset/'+fdir))\n",
        "            # extracting individual train and test files in their respective folders\n",
        "            zippedfile_name = os.listdir(os.path.join(str(os.getcwd()+'/dataset/'+fdir+'/')))\n",
        "            zippedfile = os.path.join(str(os.getcwd())+'/dataset/'+ fdir, zippedfile_name[0])\n",
        "            with zipfile.ZipFile(zippedfile, mode='r') as tsv_zip:\n",
        "                tsv_zip.extractall(path = os.path.join('dataset/'+fdir+'/'))\n",
        "                \n",
        "            os.remove(zippedfile)\n",
        "        else:\n",
        "            continue\n",
        "            \n",
        "os.remove(ziped_file)\n"
      ],
      "execution_count": 10,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "pycharm": {
          "name": "#%% md\n"
        },
        "id": "XR-Gq7oRoDCg"
      },
      "source": [
        "#### 3. Testing files"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cYK76UoboDCh",
        "outputId": "aa467563-63d0-4d76-bbf7-fb3ce253cf67"
      },
      "source": [
        "tsvfile = 'dataset/train/train.tsv'\n",
        "# read the data\n",
        "tsv_read = pd.read_csv(tsvfile, sep=\"\\t\")\n",
        "pdf = pd.DataFrame(tsv_read, columns=['Phrase', 'Sentiment'], index= None)\n",
        "print (set(pdf['Sentiment']))"
      ],
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "{0, 1, 2, 3, 4}\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nmOJZSQ7oDCi",
        "outputId": "fbe7e219-262d-4a50-8d5e-271a5199c225"
      },
      "source": [
        "train_split = 0.8\n",
        "val_split = 0.2\n",
        "test_split = 0\n",
        "\n",
        "training_mark = int(abs(len(pdf) * train_split))\n",
        "# validation_mark = np.add(training_mark, int(abs(len(pdf)) * val_split))\n",
        "\n",
        "print(training_mark)\n",
        "# print(validation_mark)\n",
        "\n",
        "training_set = np.array(pdf[1:training_mark])\n",
        "validation_set = np.array(pdf[training_mark:]) # pdf.loc[training_mark:validation_mark]\n",
        "# test_set = np.array(pdf.loc[validation_mark:])\n",
        "\n",
        "print(training_set.shape)\n",
        "print(validation_set.shape)\n",
        "# print(test_set.shape)\n",
        "print(training_set[:,1][0],'\\n',validation_set[:,1][0])"
      ],
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "124848\n",
            "(124847, 2)\n",
            "(31212, 2)\n",
            "2 \n",
            " 4\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cPF2s0aUsiZJ",
        "outputId": "10faa636-ac85-4996-95eb-a9a3f617a09f"
      },
      "source": [
        "training_set = np.array(pdf[1:training_mark])\n",
        "print(type(training_set))\n",
        "training_set1 = np.array(pdf.loc[1:training_mark])\n",
        "print(type(training_set1))"
      ],
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "<class 'numpy.ndarray'>\n",
            "<class 'numpy.ndarray'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "SIioHQ7OoDCt",
        "outputId": "75cf1463-31e8-4a36-fdd5-6bc540d21cdb"
      },
      "source": [
        "stopwords = [ \"a\", \"about\", \"above\", \"after\", \"again\", \"against\", \"all\", \"am\", \"an\", \"and\", \"any\", \"are\", \"as\", \"at\", \"be\", \"because\", \"been\", \"before\", \"being\", \"below\", \"between\", \"both\", \"but\", \"by\", \"could\", \"did\", \"do\", \"does\", \"doing\", \"down\", \"during\", \"each\", \"few\", \"for\", \"from\", \"further\", \"had\", \"has\", \"have\", \"having\", \"he\", \"he'd\", \"he'll\", \"he's\", \"her\", \"here\", \"here's\", \"hers\", \"herself\", \"him\", \"himself\", \"his\", \"how\", \"how's\", \"i\", \"i'd\", \"i'll\", \"i'm\", \"i've\", \"if\", \"in\", \"into\", \"is\", \"it\", \"it's\", \"its\", \"itself\", \"let's\", \"me\", \"more\", \"most\", \"my\", \"myself\", \"nor\", \"of\", \"on\", \"once\", \"only\", \"or\", \"other\", \"ought\", \"our\", \"ours\", \"ourselves\", \"out\", \"over\", \"own\", \"same\", \"she\", \"she'd\", \"she'll\", \"she's\", \"should\", \"so\", \"some\", \"such\", \"than\", \"that\", \"that's\", \"the\", \"their\", \"theirs\", \"them\", \"themselves\", \"then\", \"there\", \"there's\", \"these\", \"they\", \"they'd\", \"they'll\", \"they're\", \"they've\", \"this\", \"those\", \"through\", \"to\", \"too\", \"under\", \"until\", \"up\", \"very\", \"was\", \"we\", \"we'd\", \"we'll\", \"we're\", \"we've\", \"were\", \"what\", \"what's\", \"when\", \"when's\", \"where\", \"where's\", \"which\", \"while\", \"who\", \"who's\", \"whom\", \"why\", \"why's\", \"with\", \"would\", \"you\", \"you'd\", \"you'll\", \"you're\", \"you've\", \"your\", \"yours\", \"yourself\", \"yourselves\" ]\n",
        "\n",
        "import time\n",
        "\n",
        "def data_distribution_standardisation(DataFrame):\n",
        "    phrases = [DataFrame[:,0][x].lower() for x in range(len(DataFrame))]\n",
        "    sentiments = np.array([DataFrame[:,1][y] for y in range(len(DataFrame))], dtype='int32')\n",
        "    \n",
        "    for word in stopwords:\n",
        "        token = \" \"+ word +\" \"\n",
        "        phrases = [phrases[i].replace(token, \" \") for i in range(len(phrases))]\n",
        "\n",
        "    return phrases, sentiments\n",
        "\n",
        "train_ds, train_labels = data_distribution_standardisation(training_set)\n",
        "t0 = time.process_time()\n",
        "val_ds, val_labels = data_distribution_standardisation(validation_set)\n",
        "t1 = time.process_time()\n",
        "print('time taken: {}'.format(t1 - t0))\n",
        "print(type(train_ds), type(train_labels))\n",
        "print(type(train_labels[0]))\n",
        "print(len(train_labels))\n",
        "print(training_set[0:10])\n",
        "print(train_labels[0:10])\n",
        "print ('-' * 50)\n",
        "print(validation_set[0:10])\n",
        "print(val_labels[0:10])\n",
        "print(type(val_labels[0]))\n",
        "print(type(train_labels[0]))"
      ],
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "time taken: 1.577563188999875\n",
            "<class 'list'> <class 'numpy.ndarray'>\n",
            "<class 'numpy.int32'>\n",
            "124847\n",
            "[['A series of escapades demonstrating the adage that what is good for the goose'\n",
            "  2]\n",
            " ['A series' 2]\n",
            " ['A' 2]\n",
            " ['series' 2]\n",
            " ['of escapades demonstrating the adage that what is good for the goose'\n",
            "  2]\n",
            " ['of' 2]\n",
            " ['escapades demonstrating the adage that what is good for the goose' 2]\n",
            " ['escapades' 2]\n",
            " ['demonstrating the adage that what is good for the goose' 2]\n",
            " ['demonstrating the adage' 2]]\n",
            "[2 2 2 2 2 2 2 2 2 2]\n",
            "--------------------------------------------------\n",
            "[[\"he 's the best brush in the business\" 4]\n",
            " [\"'s the best brush in the business\" 2]\n",
            " ['the best brush in the business' 3]\n",
            " ['the best brush' 3]\n",
            " ['best brush' 3]\n",
            " ['in the business' 3]\n",
            " [\"I did n't find much fascination in the swinging .\" 1]\n",
            " [\"did n't find much fascination in the swinging .\" 1]\n",
            " [\"did n't find much fascination in the swinging\" 1]\n",
            " ['find much fascination in the swinging' 3]]\n",
            "[4 2 3 3 3 3 1 1 1 3]\n",
            "<class 'numpy.int32'>\n",
            "<class 'numpy.int32'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "yUk06XL8oDCu"
      },
      "source": [
        "from tensorflow.keras.preprocessing.text import Tokenizer\n",
        "from tensorflow.keras.preprocessing.sequence import pad_sequences"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "awMVUcF1oDCv",
        "outputId": "ff59d1c1-08b0-43af-e5c1-fad501a15a7c"
      },
      "source": [
        "\n",
        "def tokenizing_dataset(dataset):\n",
        "    tokenizer = Tokenizer(num_words=13600, oov_token= '<00V>')\n",
        "    tokenizer.fit_on_texts(dataset)\n",
        "    word_index = tokenizer.word_index\n",
        "    if len(word_index)>= 10000:\n",
        "        print ('There are more than 10,000 tokens! This may take longer to compute!')\n",
        "    \n",
        "    # Now I have tokenized sentences using text_to_sequences and therafter padded to make them all at the same length\n",
        "    sequences = tokenizer.texts_to_sequences(dataset)\n",
        "    padded_sentences = pad_sequences(sequences, maxlen= 33, truncating ='pre', padding='pre')\n",
        "    \n",
        "    return padded_sentences, word_index, sequences\n",
        "\n",
        "padded_train, train_word_index, train_sequence = tokenizing_dataset(train_ds)\n",
        "padded_val, val_word_index, val_sequence = tokenizing_dataset(val_ds)\n",
        "# padded_test, test_word_index, test_sequence = tokenizing_dataset(test_ds)\n",
        "\n",
        "max_length_train = max([len(x) for x in train_sequence])\n",
        "print(max_length_train)\n",
        "max_length_val = max([len(x) for x in val_sequence])\n",
        "print(max_length_val)\n",
        "print('-' * 50)\n",
        "print (padded_train[0], len(train_word_index), type(train_sequence))\n",
        "print (padded_val[0], len(val_word_index), val_sequence[0])\n",
        "print (type(padded_train))\n",
        "print(train_sequence[0:10])\n",
        "print(len(padded_train[0]))\n",
        "print(len(padded_val[0]))\n",
        "print(type(val_labels[0]))\n",
        "print(type(train_labels[0]))"
      ],
      "execution_count": 119,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "There are more than 10,000 tokens! This may take longer to compute!\n",
            "33\n",
            "32\n",
            "--------------------------------------------------\n",
            "[    0     0     0     0     0     0     0     0     0     0     0     0\n",
            "     0     0     0     0     0     0     0     0     0     0     0     0\n",
            "     0     0     4   268 12980  5316  5841    19  2460] 13605 <class 'list'>\n",
            "[   0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "    0    0    0    0    0    0    0    0    0    0    0    0    0    0\n",
            "  720    2   70 5838  363] 6825 [720, 2, 70, 5838, 363]\n",
            "<class 'numpy.ndarray'>\n",
            "[[4, 268, 12980, 5316, 5841, 19, 2460], [4, 268], [4], [268], [8, 12980, 5316, 5841, 19, 2460], [8], [12980, 5316, 5841, 19, 2460], [12980], [5316, 5841, 19, 2460], [5316, 5841]]\n",
            "33\n",
            "33\n",
            "<class 'numpy.int32'>\n",
            "<class 'numpy.int32'>\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oxc6OWdcoDCw",
        "outputId": "8897ee59-9a88-4b07-d9be-d960564acce8"
      },
      "source": [
        "matching = 0\n",
        "non_matching = 0\n",
        "for key in val_word_index.keys():\n",
        "    if key in train_word_index.keys():\n",
        "        matching += 1\n",
        "    else:\n",
        "        non_matching +=1\n",
        "        \n",
        "print (matching, non_matching)"
      ],
      "execution_count": 122,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "5141 1684\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nELsJEvVoDCy",
        "outputId": "8e62721c-0821-4599-d89c-61255ed9940f"
      },
      "source": [
        "type(train_sequence)"
      ],
      "execution_count": 123,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "list"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 123
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "pycharm": {
          "name": "#%%\n"
        },
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9sw8ipL5oDC0",
        "outputId": "65f3a14f-48c9-4cc6-fb71-b454b316995b"
      },
      "source": [
        "def decoding_sequences(word_index, sequences):\n",
        "    reversed_index = dict(map(reversed, word_index.items()))\n",
        "    for letter in range(len(sequences)):\n",
        "        reversed_index.get(letter) \n",
        "    reversed_sequence = [reversed_index.get(letter) for letter in sequences]\n",
        "    return (' '.join(reversed_sequence))\n",
        "    \n",
        "print(decoding_sequences(train_word_index, train_sequence[0]))\n",
        "print(train_ds[0])"
      ],
      "execution_count": 124,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "a series escapades demonstrating adage good goose\n",
            "a series escapades demonstrating adage good goose\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "pV0d1C-OvYdW",
        "outputId": "cc9e1df9-8ae2-4ab8-e834-212900395c27"
      },
      "source": [
        "len(train_word_index)"
      ],
      "execution_count": 125,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "13605"
            ]
          },
          "metadata": {
            "tags": []
          },
          "execution_count": 125
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Bip8i0ExoDC2",
        "outputId": "41d15cdf-2582-4818-8563-51b2f26059bd"
      },
      "source": [
        "vocabulary_size = 13600 #len(padded_train)\n",
        "embedding_dim = 8\n",
        "max_length = 33\n",
        "trunc_type = 'post'\n",
        "oov_tok = '<00V>'\n",
        "\n",
        "model = tf.keras.Sequential([\n",
        "                             \n",
        "    tf.keras.layers.Embedding(vocabulary_size, embedding_dim, input_length=max_length),\n",
        "    tf.keras.layers.Flatten(),\n",
        "    #tf.keras.layers.GlobalAveragePooling1D(),\n",
        "    tf.keras.layers.Dense(64, activation=\"relu\"),\n",
        "    tf.keras.layers.Dense(16, activation=\"relu\"),\n",
        "    tf.keras.layers.Dense(5, activation ='sigmoid')\n",
        "\n",
        "])\n",
        "\n",
        "model.compile(loss=tf.keras.losses.SparseCategoricalCrossentropy(), optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), metrics= ['accuracy'])\n",
        "model.summary()"
      ],
      "execution_count": 126,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Model: \"sequential_25\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "embedding_25 (Embedding)     (None, 33, 8)             108800    \n",
            "_________________________________________________________________\n",
            "flatten_25 (Flatten)         (None, 264)               0         \n",
            "_________________________________________________________________\n",
            "dense_60 (Dense)             (None, 64)                16960     \n",
            "_________________________________________________________________\n",
            "dense_61 (Dense)             (None, 16)                1040      \n",
            "_________________________________________________________________\n",
            "dense_62 (Dense)             (None, 5)                 85        \n",
            "=================================================================\n",
            "Total params: 126,885\n",
            "Trainable params: 126,885\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "NjTyKxhioDC3",
        "outputId": "955c73a7-5072-4882-d024-d36ce2abc1b8"
      },
      "source": [
        "Dnum_epochs = 100\n",
        "history = model.fit(padded_train, train_labels, batch_size=10000, epochs = num_epochs, validation_data = (padded_val, val_labels))"
      ],
      "execution_count": 127,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Epoch 1/100\n",
            "13/13 [==============================] - 1s 62ms/step - loss: 1.5592 - accuracy: 0.4203 - val_loss: 1.4320 - val_accuracy: 0.4922\n",
            "Epoch 2/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 1.3754 - accuracy: 0.5145 - val_loss: 1.3417 - val_accuracy: 0.4922\n",
            "Epoch 3/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 1.2845 - accuracy: 0.5118 - val_loss: 1.2726 - val_accuracy: 0.4922\n",
            "Epoch 4/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 1.2200 - accuracy: 0.5157 - val_loss: 1.2593 - val_accuracy: 0.4938\n",
            "Epoch 5/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 1.1944 - accuracy: 0.5226 - val_loss: 1.2543 - val_accuracy: 0.4943\n",
            "Epoch 6/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 1.1589 - accuracy: 0.5359 - val_loss: 1.2558 - val_accuracy: 0.4922\n",
            "Epoch 7/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 1.1343 - accuracy: 0.5435 - val_loss: 1.2632 - val_accuracy: 0.4865\n",
            "Epoch 8/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 1.1023 - accuracy: 0.5558 - val_loss: 1.2820 - val_accuracy: 0.4733\n",
            "Epoch 9/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 1.0640 - accuracy: 0.5707 - val_loss: 1.3113 - val_accuracy: 0.4631\n",
            "Epoch 10/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 1.0430 - accuracy: 0.5825 - val_loss: 1.3459 - val_accuracy: 0.4513\n",
            "Epoch 11/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 1.0178 - accuracy: 0.5925 - val_loss: 1.3708 - val_accuracy: 0.4432\n",
            "Epoch 12/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.9929 - accuracy: 0.6056 - val_loss: 1.3987 - val_accuracy: 0.4375\n",
            "Epoch 13/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.9747 - accuracy: 0.6144 - val_loss: 1.4266 - val_accuracy: 0.4289\n",
            "Epoch 14/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.9486 - accuracy: 0.6297 - val_loss: 1.4526 - val_accuracy: 0.4194\n",
            "Epoch 15/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.9154 - accuracy: 0.6520 - val_loss: 1.4817 - val_accuracy: 0.4193\n",
            "Epoch 16/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.8818 - accuracy: 0.6698 - val_loss: 1.5160 - val_accuracy: 0.4111\n",
            "Epoch 17/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.8369 - accuracy: 0.6874 - val_loss: 1.5656 - val_accuracy: 0.4032\n",
            "Epoch 18/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.7991 - accuracy: 0.6983 - val_loss: 1.6214 - val_accuracy: 0.4059\n",
            "Epoch 19/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.7637 - accuracy: 0.7067 - val_loss: 1.6690 - val_accuracy: 0.3975\n",
            "Epoch 20/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.7343 - accuracy: 0.7157 - val_loss: 1.7173 - val_accuracy: 0.3985\n",
            "Epoch 21/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.7103 - accuracy: 0.7238 - val_loss: 1.7634 - val_accuracy: 0.3985\n",
            "Epoch 22/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.6950 - accuracy: 0.7282 - val_loss: 1.8012 - val_accuracy: 0.3944\n",
            "Epoch 23/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.6793 - accuracy: 0.7328 - val_loss: 1.8398 - val_accuracy: 0.3941\n",
            "Epoch 24/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.6619 - accuracy: 0.7382 - val_loss: 1.8804 - val_accuracy: 0.3914\n",
            "Epoch 25/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.6520 - accuracy: 0.7431 - val_loss: 1.9118 - val_accuracy: 0.3863\n",
            "Epoch 26/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.6392 - accuracy: 0.7476 - val_loss: 1.9479 - val_accuracy: 0.3874\n",
            "Epoch 27/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.6294 - accuracy: 0.7503 - val_loss: 1.9691 - val_accuracy: 0.3802\n",
            "Epoch 28/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.6223 - accuracy: 0.7514 - val_loss: 2.0181 - val_accuracy: 0.3886\n",
            "Epoch 29/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.6097 - accuracy: 0.7557 - val_loss: 2.0511 - val_accuracy: 0.3867\n",
            "Epoch 30/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.5991 - accuracy: 0.7596 - val_loss: 2.0777 - val_accuracy: 0.3847\n",
            "Epoch 31/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5935 - accuracy: 0.7631 - val_loss: 2.1263 - val_accuracy: 0.3888\n",
            "Epoch 32/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.5913 - accuracy: 0.7621 - val_loss: 2.1333 - val_accuracy: 0.3834\n",
            "Epoch 33/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.5803 - accuracy: 0.7653 - val_loss: 2.1757 - val_accuracy: 0.3829\n",
            "Epoch 34/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.5743 - accuracy: 0.7693 - val_loss: 2.2155 - val_accuracy: 0.3846\n",
            "Epoch 35/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5684 - accuracy: 0.7713 - val_loss: 2.2325 - val_accuracy: 0.3779\n",
            "Epoch 36/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5620 - accuracy: 0.7728 - val_loss: 2.2647 - val_accuracy: 0.3799\n",
            "Epoch 37/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.5518 - accuracy: 0.7770 - val_loss: 2.2982 - val_accuracy: 0.3809\n",
            "Epoch 38/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5468 - accuracy: 0.7792 - val_loss: 2.3221 - val_accuracy: 0.3781\n",
            "Epoch 39/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.5429 - accuracy: 0.7789 - val_loss: 2.3544 - val_accuracy: 0.3802\n",
            "Epoch 40/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.5369 - accuracy: 0.7809 - val_loss: 2.3726 - val_accuracy: 0.3744\n",
            "Epoch 41/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5331 - accuracy: 0.7826 - val_loss: 2.4224 - val_accuracy: 0.3785\n",
            "Epoch 42/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.5269 - accuracy: 0.7845 - val_loss: 2.4349 - val_accuracy: 0.3780\n",
            "Epoch 43/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.5242 - accuracy: 0.7847 - val_loss: 2.4620 - val_accuracy: 0.3767\n",
            "Epoch 44/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.5174 - accuracy: 0.7884 - val_loss: 2.5071 - val_accuracy: 0.3769\n",
            "Epoch 45/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.5156 - accuracy: 0.7886 - val_loss: 2.5306 - val_accuracy: 0.3800\n",
            "Epoch 46/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.5116 - accuracy: 0.7887 - val_loss: 2.5608 - val_accuracy: 0.3806\n",
            "Epoch 47/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.5081 - accuracy: 0.7917 - val_loss: 2.5951 - val_accuracy: 0.3780\n",
            "Epoch 48/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.5025 - accuracy: 0.7936 - val_loss: 2.6197 - val_accuracy: 0.3792\n",
            "Epoch 49/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4972 - accuracy: 0.7951 - val_loss: 2.6335 - val_accuracy: 0.3737\n",
            "Epoch 50/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4946 - accuracy: 0.7947 - val_loss: 2.6554 - val_accuracy: 0.3716\n",
            "Epoch 51/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4957 - accuracy: 0.7945 - val_loss: 2.7021 - val_accuracy: 0.3780\n",
            "Epoch 52/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4919 - accuracy: 0.7966 - val_loss: 2.7301 - val_accuracy: 0.3760\n",
            "Epoch 53/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4861 - accuracy: 0.7992 - val_loss: 2.7389 - val_accuracy: 0.3723\n",
            "Epoch 54/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4804 - accuracy: 0.8011 - val_loss: 2.7742 - val_accuracy: 0.3755\n",
            "Epoch 55/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4847 - accuracy: 0.7979 - val_loss: 2.7955 - val_accuracy: 0.3720\n",
            "Epoch 56/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4770 - accuracy: 0.8013 - val_loss: 2.8129 - val_accuracy: 0.3714\n",
            "Epoch 57/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4769 - accuracy: 0.8019 - val_loss: 2.8444 - val_accuracy: 0.3747\n",
            "Epoch 58/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4750 - accuracy: 0.8018 - val_loss: 2.8778 - val_accuracy: 0.3760\n",
            "Epoch 59/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4692 - accuracy: 0.8040 - val_loss: 2.8916 - val_accuracy: 0.3720\n",
            "Epoch 60/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4676 - accuracy: 0.8048 - val_loss: 2.9217 - val_accuracy: 0.3760\n",
            "Epoch 61/100\n",
            "13/13 [==============================] - 1s 51ms/step - loss: 0.4648 - accuracy: 0.8056 - val_loss: 2.9496 - val_accuracy: 0.3737\n",
            "Epoch 62/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4650 - accuracy: 0.8050 - val_loss: 2.9591 - val_accuracy: 0.3717\n",
            "Epoch 63/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.4635 - accuracy: 0.8039 - val_loss: 2.9874 - val_accuracy: 0.3721\n",
            "Epoch 64/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4610 - accuracy: 0.8060 - val_loss: 3.0098 - val_accuracy: 0.3739\n",
            "Epoch 65/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4606 - accuracy: 0.8055 - val_loss: 3.0271 - val_accuracy: 0.3709\n",
            "Epoch 66/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4545 - accuracy: 0.8087 - val_loss: 3.0810 - val_accuracy: 0.3774\n",
            "Epoch 67/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4531 - accuracy: 0.8075 - val_loss: 3.0900 - val_accuracy: 0.3712\n",
            "Epoch 68/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4516 - accuracy: 0.8091 - val_loss: 3.1123 - val_accuracy: 0.3729\n",
            "Epoch 69/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4501 - accuracy: 0.8086 - val_loss: 3.1322 - val_accuracy: 0.3694\n",
            "Epoch 70/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4498 - accuracy: 0.8083 - val_loss: 3.1593 - val_accuracy: 0.3727\n",
            "Epoch 71/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4483 - accuracy: 0.8105 - val_loss: 3.1600 - val_accuracy: 0.3701\n",
            "Epoch 72/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4451 - accuracy: 0.8113 - val_loss: 3.2015 - val_accuracy: 0.3729\n",
            "Epoch 73/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.4458 - accuracy: 0.8099 - val_loss: 3.2267 - val_accuracy: 0.3705\n",
            "Epoch 74/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4442 - accuracy: 0.8099 - val_loss: 3.2490 - val_accuracy: 0.3730\n",
            "Epoch 75/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4429 - accuracy: 0.8120 - val_loss: 3.2677 - val_accuracy: 0.3708\n",
            "Epoch 76/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4420 - accuracy: 0.8117 - val_loss: 3.2940 - val_accuracy: 0.3738\n",
            "Epoch 77/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4388 - accuracy: 0.8142 - val_loss: 3.3120 - val_accuracy: 0.3723\n",
            "Epoch 78/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4344 - accuracy: 0.8163 - val_loss: 3.3271 - val_accuracy: 0.3701\n",
            "Epoch 79/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4363 - accuracy: 0.8135 - val_loss: 3.3409 - val_accuracy: 0.3685\n",
            "Epoch 80/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4360 - accuracy: 0.8125 - val_loss: 3.3787 - val_accuracy: 0.3742\n",
            "Epoch 81/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4344 - accuracy: 0.8147 - val_loss: 3.3914 - val_accuracy: 0.3694\n",
            "Epoch 82/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4328 - accuracy: 0.8151 - val_loss: 3.3921 - val_accuracy: 0.3649\n",
            "Epoch 83/100\n",
            "13/13 [==============================] - 1s 47ms/step - loss: 0.4319 - accuracy: 0.8145 - val_loss: 3.4011 - val_accuracy: 0.3682\n",
            "Epoch 84/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4302 - accuracy: 0.8157 - val_loss: 3.4318 - val_accuracy: 0.3695\n",
            "Epoch 85/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4291 - accuracy: 0.8157 - val_loss: 3.4673 - val_accuracy: 0.3702\n",
            "Epoch 86/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4289 - accuracy: 0.8156 - val_loss: 3.4858 - val_accuracy: 0.3710\n",
            "Epoch 87/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4262 - accuracy: 0.8160 - val_loss: 3.4965 - val_accuracy: 0.3690\n",
            "Epoch 88/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4246 - accuracy: 0.8173 - val_loss: 3.5172 - val_accuracy: 0.3686\n",
            "Epoch 89/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4240 - accuracy: 0.8184 - val_loss: 3.5443 - val_accuracy: 0.3689\n",
            "Epoch 90/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4252 - accuracy: 0.8178 - val_loss: 3.5697 - val_accuracy: 0.3700\n",
            "Epoch 91/100\n",
            "13/13 [==============================] - 1s 46ms/step - loss: 0.4246 - accuracy: 0.8162 - val_loss: 3.5787 - val_accuracy: 0.3697\n",
            "Epoch 92/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4234 - accuracy: 0.8175 - val_loss: 3.5708 - val_accuracy: 0.3698\n",
            "Epoch 93/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4243 - accuracy: 0.8158 - val_loss: 3.6056 - val_accuracy: 0.3705\n",
            "Epoch 94/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4208 - accuracy: 0.8178 - val_loss: 3.6288 - val_accuracy: 0.3670\n",
            "Epoch 95/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4202 - accuracy: 0.8186 - val_loss: 3.6362 - val_accuracy: 0.3709\n",
            "Epoch 96/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4180 - accuracy: 0.8188 - val_loss: 3.6446 - val_accuracy: 0.3681\n",
            "Epoch 97/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4182 - accuracy: 0.8195 - val_loss: 3.6657 - val_accuracy: 0.3702\n",
            "Epoch 98/100\n",
            "13/13 [==============================] - 1s 49ms/step - loss: 0.4188 - accuracy: 0.8184 - val_loss: 3.6850 - val_accuracy: 0.3682\n",
            "Epoch 99/100\n",
            "13/13 [==============================] - 1s 48ms/step - loss: 0.4166 - accuracy: 0.8196 - val_loss: 3.7004 - val_accuracy: 0.3678\n",
            "Epoch 100/100\n",
            "13/13 [==============================] - 1s 50ms/step - loss: 0.4179 - accuracy: 0.8183 - val_loss: 3.7079 - val_accuracy: 0.3644\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 541
        },
        "id": "xXm7bhU0Kqyo",
        "outputId": "702c411f-e796-49c9-ed7b-6e7c8ef070ea"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "def plot_graphs(history, string):\n",
        "  plt.plot(history.history[string])\n",
        "  plt.plot(history.history['val_'+string])\n",
        "  plt.xlabel(\"Epochs\")\n",
        "  plt.ylabel(string)\n",
        "  plt.legend([string, 'val_'+string])\n",
        "  plt.show()\n",
        "  \n",
        "plot_graphs(history, \"accuracy\")\n",
        "plot_graphs(history, \"loss\")"
      ],
      "execution_count": 128,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "tags": [],
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lP-mDU-mRNao",
        "outputId": "fb13c269-1c54-4976-f55d-b9e07c8a215a"
      },
      "source": [
        "e = model.layers[0]\n",
        "weights = e.get_weights()[0]\n",
        "print(weights.shape)"
      ],
      "execution_count": 25,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "(10000, 16)\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cDQgL14B8YLJ"
      },
      "source": [
        ""
      ],
      "execution_count": 25,
      "outputs": []
    }
  ]
}